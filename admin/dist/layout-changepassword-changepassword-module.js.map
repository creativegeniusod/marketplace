{"version":3,"sources":["webpack:///./src/core/admin/profile/changepassword/changepassword-effect/changepassword.effect.ts","webpack:///./src/core/admin/profile/changepassword/changepassword-models/changepassword.model.ts","webpack:///./src/core/admin/profile/changepassword/changepassword-models/changepassword.response.model.ts","webpack:///./src/core/admin/profile/changepassword/changepassword-reducer/changepassword.selector.ts","webpack:///./src/core/admin/profile/changepassword/changepassword.sandbox.ts","webpack:///./src/core/admin/profile/changepassword/changepassword.service.ts","webpack:///./src/theme/default/admin/layout/changepassword/changepassword.component.html","webpack:///./src/theme/default/admin/layout/changepassword/changepassword.component.ts","webpack:///./src/theme/default/admin/layout/changepassword/changepassword.module.ts","webpack:///./src/theme/default/admin/layout/changepassword/changepassword.routing.ts"],"names":[],"mappings":"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","file":"layout-changepassword-changepassword-module.js","sourcesContent":["/*\r\n * spurtcommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport * as actions from '../changepassword-action/changepassword.action';\r\nimport { catchError } from 'rxjs/internal/operators';\r\nimport { ChangePasswordService } from '../changepassword.service';\r\nimport { ChangepasswordResponseModel } from '../changepassword-models/changepassword.response.model';\r\n\r\n@Injectable()\r\nexport class ChangepasswordEffect {\r\n  constructor(\r\n    private action$: Actions,\r\n    private service: ChangePasswordService\r\n  ) {}\r\n\r\n  @Effect()\r\n  doChangePassword$: Observable<Action> = this.action$.pipe(\r\n    ofType(actions.ActionTypes.DO_CHANGE_PASWORD),\r\n    map((action: actions.DoChangePasswordAction) => action.payload),\r\n    switchMap(state => {\r\n      return this.service.changePassword(state).pipe(\r\n        switchMap(user => [\r\n          new actions.DoChangePasswordSucessAction(\r\n            new ChangepasswordResponseModel(user)\r\n          )\r\n        ]),\r\n        catchError(error => of(new actions.DoChangePasswordFailAction(error)))\r\n      );\r\n    })\r\n  );\r\n}\r\n","/*\r\n * spurtcommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nexport class ChangePasswordForm {\r\n  public oldPassword: String;\r\n  public newPassword: String;\r\n\r\n  constructor(changePasswordForm: any) {\r\n    this.oldPassword = changePasswordForm.oldpsw || '';\r\n    this.newPassword = changePasswordForm.newpsw || '';\r\n  }\r\n}\r\n","/*\r\n * spurtcommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nexport class ChangepasswordResponseModel {\r\n  public user: any = {};\r\n\r\n  constructor(changepasswordResponse: any) {\r\n    this.user = changepasswordResponse || '';\r\n  }\r\n}\r\n","/*\r\n * spurtcommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { createSelector } from 'reselect';\r\nimport * as fromChangepassword from './changepassword.reducer';\r\nimport { AppState } from '../../../../app.state.interface';\r\n// *************************** PUBLIC API's ****************************\r\n/**\r\n * Auth store functions\r\n */\r\nexport const getChangePasswordState = (state: AppState) => state.changepassword;\r\n\r\nexport const getChangePassword = createSelector(\r\n  getChangePasswordState,\r\n  fromChangepassword.getChangePassword\r\n);\r\nexport const getChangePasswordResponse = createSelector(\r\n  getChangePasswordState,\r\n  fromChangepassword.getChangePasswordResponse\r\n);\r\nexport const getChangePasswordRequestLoading = createSelector(\r\n  getChangePasswordState,\r\n  fromChangepassword.getChangePasswordRequestLoading\r\n);\r\nexport const getChangePasswordRequestLoaded = createSelector(\r\n  getChangePasswordState,\r\n  fromChangepassword.getChangePasswordRequestLoaded\r\n);\r\nexport const getChangePasswordRequestFailed = createSelector(\r\n  getChangePasswordState,\r\n  fromChangepassword.getChangePasswordRequestFailed\r\n);\r\n","/*\r\n* spurtcommerce\r\n* version 1.0\r\n* http://www.spurtcommerce.com\r\n*\r\n* Copyright (c) 2022 piccosoft ltd\r\n* Author piccosoft ltd <support@piccosoft.com>\r\n* Licensed under the MIT license.\r\n*/\r\nimport {Injectable} from '@angular/core';\r\nimport {Store} from '@ngrx/store';\r\nimport * as changepasswordActions from './changepassword-action/changepassword.action';\r\nimport {Subscription} from 'rxjs/index';\r\nimport * as store from '../../../app.state.interface';\r\nimport {Router} from '@angular/router';\r\nimport {ChangePasswordForm} from './changepassword-models/changepassword.model';\r\nimport {\r\n    getChangePassword, getChangePasswordRequestLoaded,\r\n    getChangePasswordRequestLoading, getChangePasswordResponse,\r\n    getChangePasswordRequestFailed\r\n} from './changepassword-reducer/changepassword.selector';\r\n\r\n@Injectable()\r\nexport class ChangepasswordSandbox {\r\n\r\n    public getChangePassword$ = this.appState.select(getChangePassword);\r\n    public getChangePasswordResponse$ = this.appState.select(getChangePasswordResponse);\r\n    public getChangePasswordRequestLoading$ = this.appState.select(getChangePasswordRequestLoading);\r\n    public getChangePasswordRequestLoade$ = this.appState.select(getChangePasswordRequestLoaded);\r\n    public getChangePasswordRequestFailed$ = this.appState.select(getChangePasswordRequestFailed);\r\n\r\n\r\n    private subscriptions: Array<Subscription> = [];\r\n\r\n    constructor(protected appState: Store<store.AppState>, private router: Router) {\r\n\r\n        this.subscribe();\r\n    }\r\n\r\n\r\n    public changePSW(value) {\r\n        this.appState.dispatch(new changepasswordActions.DoChangePasswordAction(new ChangePasswordForm(value)));\r\n    }\r\n\r\n    subscribe() {\r\n        this.subscriptions.push(this.getChangePassword$.subscribe(data => {\r\n            if (data) {\r\n                if (data.user) {\r\n                    if (data.user.status === 1) {\r\n                        this.router.navigate(['/catalog/product']);\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/*\r\n * spurtcommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 piccosoft ltd\r\n * Author piccosoft ltd <support@piccosoft.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { ChangePasswordForm } from './changepassword-models/changepassword.model';\r\nimport { Api } from '../../providers/api/api';\r\n\r\n@Injectable()\r\nexport class ChangePasswordService extends Api {\r\n  private URL = this.getBaseUrl();\r\n\r\n  // change psw\r\n  public changePassword(param: ChangePasswordForm): Observable<any> {\r\n    return this.http.put(this.URL + '/auth/change-password', param);\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"auth-wrapper\\\">\\r\\n    <div class=\\\"auth-box on-sidebar\\\">\\r\\n        <div class=\\\"changePswform\\\">\\r\\n            <!-- Form -->\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-12\\\">\\r\\n                    <form novalidate (ngSubmit)=\\\"onSubmit(changePassword.value)\\\" [formGroup]=\\\"changePassword\\\" class=\\\"form-horizontal m-t-20\\\">\\r\\n\\r\\n                        <h3>Change Password</h3>\\r\\n                        <div class=\\\"input-group mb-4\\\">\\r\\n                            <input [(ngModel)]=\\\"oldPSW\\\" required minlength=\\\"5\\\" type=\\\"password\\\" formControlName=\\\"oldPSW\\\" class=\\\"form-control form-control-md\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.oldPSW.errors }\\\" placeholder=\\\"Current Password\\\" aria-label=\\\"Current Password\\\" aria-describedby=\\\"basic-addon1\\\">\\r\\n                            <div *ngIf=\\\"submitted && f.oldPSW.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                (minimum 5 characters).\\r\\n                                <div *ngIf=\\\"f.oldPSW.errors.required\\\">Current Password is required\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"input-group mb-4\\\">\\r\\n                            <input [(ngModel)]=\\\"newPSW\\\" required minlength=\\\"5\\\" type=\\\"password\\\" formControlName=\\\"newPSW\\\" class=\\\"form-control form-control-md\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.newPSW.errors }\\\" placeholder=\\\"New Password\\\" aria-label=\\\"New Password\\\" aria-describedby=\\\"basic-addon2\\\">\\r\\n                            <div *ngIf=\\\"submitted && f.newPSW.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                (minimum 5 characters).\\r\\n                                <div *ngIf=\\\"f.newPSW.errors.required\\\">New Password is required\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"input-group mb-4\\\">\\r\\n                            <input [(ngModel)]=\\\"confirmPSW\\\" required minlength=\\\"5\\\" type=\\\"password\\\" formControlName=\\\"confirmPSW\\\" class=\\\"form-control form-control-md\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.confirmPSW.errors }\\\" placeholder=\\\"Confirm Password\\\" aria-label=\\\"Confirm Password\\\"\\r\\n                                aria-describedby=\\\"basic-addon2\\\">\\r\\n                            <div *ngIf=\\\"submitted && f.confirmPSW.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                (minimum 5 characters).\\r\\n                                <div *ngIf=\\\"f.confirmPSW.errors.required\\\">Confirm Password is required\\r\\n\\r\\n                                </div>\\r\\n                                <div *ngIf=\\\"f.confirmPSW.errors.mismatchedPasswords\\\">New Password and Confirm password should Match </div>\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"form-group row\\\">\\r\\n                            <div class=\\\"col-md-6\\\">\\r\\n                                <div class=\\\"custom-control custom-checkbox\\\">\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"col-md-6 p-b-20\\\">\\r\\n                                <button class=\\\"btn btn-info  float-left\\\" [routerLink]=\\\"['/dashboard']\\\" routerLinkActive=\\\"router-link-active\\\">\\r\\n                                    Cancel\\r\\n                                </button>\\r\\n                                <button class=\\\"btn btn-block btn-info  float-right\\\" type=\\\"submit\\\">\\r\\n                                    Submit\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\"","/*\r\n * SpurtCommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 PICCOSOFT\r\n * Author piccosoft <support@spurtcommerce.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { Component, OnInit } from '@angular/core';\r\nimport {\r\n  Validators,\r\n  FormGroup,\r\n  FormControl,\r\n  FormBuilder\r\n} from '@angular/forms';\r\nimport { ChangepasswordSandbox } from '../../../../../core/admin/profile/changepassword/changepassword.sandbox';\r\n\r\n@Component({\r\n  selector: 'app-spurt-changepassword',\r\n  templateUrl: './changepassword.component.html'\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  // Variables\r\n  changePassword: FormGroup;\r\n  public submitted = false;\r\n  oldPSW: FormControl;\r\n  newPSW: FormControl;\r\n  confirmPSW: FormControl;\r\n\r\n  constructor(public fb: FormBuilder, public sandbox: ChangepasswordSandbox) {}\r\n\r\n  ngOnInit() {\r\n    this.initChangePswForm();\r\n  }\r\n\r\n  // InitFormGroup\r\n  initChangePswForm() {\r\n    this.changePassword = this.fb.group(\r\n      {\r\n        oldPSW: ['', Validators.required],\r\n        newPSW: ['', Validators.required],\r\n        confirmPSW: ['', Validators.required]\r\n      },\r\n      { validator: this.matchingPasswords('newPSW', 'confirmPSW') }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles form 'matchingPasswords' event. for conformation password.\r\n   * @param passwordKey for password value\r\n   * @param passwordConfirmationKey for Repassword value\r\n   */\r\n  matchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[passwordKey];\r\n      const passwordConfirmation = group.controls[passwordConfirmationKey];\r\n      if (password.value !== passwordConfirmation.value) {\r\n        return passwordConfirmation.setErrors({ mismatchedPasswords: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Handles form 'submit' event. Calls sandbox change password function if form is valid.\r\n   *\r\n   * @param event form event\r\n   * @param form entire form value\r\n   */\r\n  onSubmit(form) {\r\n    this.submitted = true;\r\n    if (this.changePassword.invalid) {\r\n      return;\r\n    }\r\n    const para: any = {};\r\n    para.oldpsw = this.changePassword.value.oldPSW;\r\n    para.newpsw = this.changePassword.value.newPSW;\r\n    this.sandbox.changePSW(para);\r\n  }\r\n\r\n  // form Validation\r\n  get f() {\r\n    return this.changePassword.controls;\r\n  }\r\n}\r\n","/*\r\n * SpurtCommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 PICCOSOFT\r\n * Author piccosoft <support@spurtcommerce.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { ChangepasswordEffect } from '../../../../../core/admin/profile/changepassword/changepassword-effect/changepassword.effect';\r\nimport { ChangePasswordComponent } from './changepassword.component';\r\nimport { ChangepasswordSandbox } from '../../../../../core/admin/profile/changepassword/changepassword.sandbox';\r\nimport { ChangePasswordService } from '../../../../../core/admin/profile/changepassword/changepassword.service';\r\nimport { ChangePasswordRouting } from './changepassword.routing';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgbModule,\r\n    EffectsModule.forFeature([ChangepasswordEffect]),\r\n    ChangePasswordRouting,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ChangePasswordComponent],\r\n  providers: [ChangepasswordSandbox, ChangePasswordService]\r\n})\r\nexport class ChangePasswordModule {}\r\n","/*\r\n * SpurtCommerce\r\n * http://www.spurtcommerce.com\r\n *\r\n * Copyright (c) 2022 PICCOSOFT\r\n * Author piccosoft <support@spurtcommerce.com>\r\n * Licensed under the MIT license.\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ChangePasswordComponent } from './changepassword.component';\r\n\r\nconst changePasswordRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ChangePasswordComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(changePasswordRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ChangePasswordRouting {}\r\n"],"sourceRoot":""}